<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest;

import <%= packageName %>.config.KafkaProperties;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.MediaType;
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
<%_ } else { _%>
import org.springframework.test.web.reactive.server.WebTestClient;
<%_ } _%>
import org.testcontainers.containers.KafkaContainer;

import java.time.Duration;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
<%_ if (!reactive) { _%>
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
<%_ } _%>

public class <%= upperFirstCamelCase(baseName) %>KafkaResourceIT {

    private static boolean started = false;
    private static KafkaContainer kafkaContainer;
    private KafkaProperties kafkaProperties;

    <%_ if (!reactive) { _%>
    private MockMvc restMockMvc;
    <%_ } else { _%>
    private WebTestClient client;
    <%_ } _%>

    @BeforeAll
    static void startServer() {
        if (!started) {
            startTestcontainer();
            started = true;
        }
    }

    private static void startTestcontainer() {
        kafkaContainer = new KafkaContainer("<%= kafkaVersion %>");
        kafkaContainer.start();
    }

    @BeforeEach
    void setup() {
        kafkaProperties = new KafkaProperties();
        Map<String, Map<String, Object>> producerProps = getProducerProps();
        kafkaProperties.setProducer(new HashMap<>(producerProps));

        Map<String, Map<String, Object>> consumerProps = getConsumerProps();
        consumerProps.get("string").put("client.id", "default-client");
        kafkaProperties.setConsumer(consumerProps);

        <%= upperFirstCamelCase(baseName) %>KafkaResource kafkaResource = new <%= upperFirstCamelCase(baseName) %>KafkaResource(kafkaProperties);

        <%_ if (!reactive) { _%>
        restMockMvc = MockMvcBuilders.standaloneSetup(kafkaResource).build();
        <%_ } else { _%>
        client = WebTestClient.bindToController(kafkaResource).build();
        <%_ } _%>
    }

    @Test
    void producesMessages()<% if (!reactive) { %> throws Exception<% } %> {
        <%_ if (!reactive) { _%>
        restMockMvc.perform(post("/api/<%= dasherizedBaseName %>-kafka/publish/string?message=value-produced"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON));
        <%_ } else { _%>
        client.post().uri("/api/jhipster-kafka/publish/topic-produce?message=value-produce")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON);
        <%_ } _%>

        Map<String, Object> consumerProps = new HashMap<>(getConsumerProps().get("string"));
        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(consumerProps);
        consumer.subscribe(Collections.singletonList("string"));
        ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));

        assertEquals(1, records.count());
        ConsumerRecord<String, String> record = records.iterator().next();
        assertEquals("value-produced", record.value());
    }

    @Test
    void consumesMessages()<% if (!reactive) { %> throws Exception<% } %> {
        <%_ if (!reactive) { _%>
        restMockMvc.perform(get("/api/generated-project-for-tests-kafka/consume?topic=string"))
            .andExpect(status().isOk())
            .andExpect(request().asyncStarted())
            .andReturn();

        restMockMvc.perform(post("/api/generated-project-for-tests-kafka/publish/string?message=value-to-consume"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON));
        <%_ } else { _%>
        String value = client.get().uri("/api/jhipster-kafka/consume?topic=topic-consume")
            .accept(MediaType.TEXT_EVENT_STREAM)
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentTypeCompatibleWith(MediaType.TEXT_EVENT_STREAM)
            .returnResult(String.class)
            .getResponseBody().blockFirst(Duration.ofSeconds(10));

        assertThat(value).isEqualTo("value-consume");
        <%_ } _%>
    }

    private Map<String, Map<String, Object>> getProducerProps() {
        Map<String, Map<String, Object>> props = new HashMap<>();
        Map<String, Object> producerProps = new HashMap<>();
        producerProps.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put("bootstrap.servers", kafkaContainer.getBootstrapServers());
        props.put("string", producerProps);
        return props;
    }

    private Map<String, Map<String, Object>> getConsumerProps() {
        Map<String, Map<String, Object>> props = new HashMap<>();
        Map<String, Object> consumerProps = new HashMap<>();
        consumerProps.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        consumerProps.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        consumerProps.put("bootstrap.servers", kafkaContainer.getBootstrapServers());
        consumerProps.put("auto.offset.reset", "earliest");
        consumerProps.put("group.id", "generated-project-for-tests");
        props.put("string", consumerProps);
        return props;
    }
}

